import os
import sys

import json
import logging
import feedparser
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, JobQueue

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
# –ü–æ–¥–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ APScheduler –¥–æ —É—Ä–æ–≤–Ω—è WARNING
logging.getLogger('apscheduler.scheduler').setLevel(logging.WARNING)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_TOKEN     = os.getenv('TELEGRAM_TOKEN')
TG_CHANNEL_ID      = os.getenv('TG_CHANNEL_ID')
YOUTUBE_CHANNEL_ID = os.getenv('YOUTUBE_CHANNEL_ID')
STATE_FILE         = 'state.json'

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
for var in ('TELEGRAM_TOKEN', 'TG_CHANNEL_ID', 'YOUTUBE_CHANNEL_ID'):
    if not globals().get(var):
        logger.error(f"‚ùå {var} –Ω–µ –∑–∞–¥–∞–Ω –≤ .env!")
        sys.exit(1)

# –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
def load_state():
    if os.path.exists(STATE_FILE):
        with open(STATE_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {}


def save_state(state):
    with open(STATE_FILE, 'w', encoding='utf-8') as f:
        json.dump(state, f, ensure_ascii=False, indent=2)

# –ü–æ–ª—É—á–µ–Ω–∏–µ RSS-—Ñ–∏–¥–∞ –∫–∞–Ω–∞–ª–∞
def fetch_feed():
    url = f'https://www.youtube.com/feeds/videos.xml?channel_id={YOUTUBE_CHANNEL_ID}'
    return feedparser.parse(url)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ
async def check_updates(context: ContextTypes.DEFAULT_TYPE):
    feed = fetch_feed()
    state = load_state()

    if not feed.entries:
        logger.warning("RSS-—Ñ–∏–¥ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return

    entry = feed.entries[0]
    vid = entry.yt_videoid
    title = entry.title
    link = entry.link
    thumb = None
    if 'media_thumbnail' in entry and entry.media_thumbnail:
        thumb = entry.media_thumbnail[0]['url']
    description = entry.summary

    if vid != state.get('last_video'):
        caption = (
            f"üìπ <b>–ù–æ–≤–æ–µ –≤–∏–¥–µ–æ:</b> {title}\n"
            f"<i>{description}</i>\n"
            f"üîó <a href=\"{link}\">–°–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ YouTube</a>"
        )
        btn = InlineKeyboardButton("üöÄ –°–º–æ—Ç—Ä–µ—Ç—å", url=link)
        markup = InlineKeyboardMarkup([[btn]])

        if thumb:
            await context.bot.send_photo(
                chat_id=TG_CHANNEL_ID,
                photo=thumb,
                caption=caption,
                parse_mode=ParseMode.HTML,
                reply_markup=markup
            )
        else:
            await context.bot.send_message(
                chat_id=TG_CHANNEL_ID,
                text=caption,
                parse_mode=ParseMode.HTML,
                reply_markup=markup
            )

        state['last_video'] = vid
        save_state(state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ RSS-–ª–µ–Ω—Ç—É YouTube-–∫–∞–Ω–∞–ª–∞."
    )

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è JobQueue
    jq = app.job_queue or JobQueue()
    jq.set_application(app)
    jq.run_repeating(check_updates, interval=1800, first=10)

    app.add_handler(CommandHandler('start', start))

    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == '__main__':
    main()

